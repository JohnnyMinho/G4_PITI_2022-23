#include <stdio.h>
//#include "Tipos.h"
#include "CRCx.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "time.h"

#define ReceiverPin 14

int bloco_sync[8] = { 1, 1, 0, 1, 1, 1, 1, 1};  //bloco em formato numérico visto que este é transformado em bytes através de shifting, no receptor ele não precisa de saber qual é o bloco de sync só precisa de saber o tamanho
//0000 0010 Start of Text
//0000 0011 End of Text

int n_bytes_guardados = 0;
int bloco_start[8] = { 1, 0, 0, 0, 0, 0, 1, 0};
int bloco_end[8] = { 1, 0, 0, 0, 0, 0, 1, 1};
int array_check_flags[9];
boolean flag_leitura = false;                           //Flag para dizer que o esp32 está ocupado a ler informação (incluí o processo de envio).
boolean flag_dados_disp = false;                        //Flag que indica ao esp32 que a aplicação têm dados para serem lidos.
int serial_flag_recebido = 0;
int tamanho_dados = 0;
int buffer_max_position = 0;
int pacotes_recebidos;
int bits_sync = 0;
int bit_lido = 0;
int bit_counter = 0;
time_t tempo_ate_bit_correto = 0;
time_t tempo_bit_errado = 0;
int obtidos = 0;
byte buffer_max[1024];
byte bit_receber;
byte byte_recebido = 0;
TaskHandle_t Task1;
TaskHandle_t Task2;
QueueHandle_t queue;

void ReceberF( void * pvParameters ) {
  for (;;) {
    while (digitalRead(ReceiverPin) == LOW) {
      vTaskDelay( pdMS_TO_TICKS(1) );
      }
    while (bits_sync != 8) { 
      vTaskDelay( pdMS_TO_TICKS(1.5));
      bit_lido = digitalRead(ReceiverPin);
     // Serial.println(bit_lido);
      xQueueSendToBack(queue, &bit_lido, 0); // Função de envio do bit para ser processado //Manual de ref. FreeRTOS capítulo 3.22
      bits_sync++;
    }
    //Serial.println(byte_recebido);
    byte_recebido = 0;
    bits_sync = 0;
    pacotes_recebidos++;
    while (digitalRead(ReceiverPin) == LOW) {
      vTaskDelay( pdMS_TO_TICKS(1) );
      }
    //attachInterrupt(digitalPinToInterrupt(ReceiverPin), interruptHandler, CHANGE);
  }
}
void ProcEnvioF( void * pvParameters ) {
  for (;;) {
    if (xQueueReceive(queue, &bit_receber, 0) == pdPASS) {
      //Serial.println(bit_receber);
      byte_recebido |= (bit_receber << bits_sync); //Fazemos um OR, ou seja enviamos o bit guardado visto que o byte_recebido é igual 00000000 inicialmente, ou seja o resultado irá ser correto independentemente de ser recebido um 0 ou 1.
      if(bits_sync == 7){
        //Enviar para a app
        Serial.println(byte_recebido);
      }
      /* if (serial_flag_recebido == 1) {
        tamanho_dados = (5 + 5 + 2 + 1);
       //Serial.println(byte_receber);
        //char mychar = (char) byte_receber;
        //Serial.println(n_bytes_guardados);
        //Serial.println(byte_receber);
        if (n_bytes_guardados == 3) {
          tamanho_dados = (5 + 5 + 2 + 1); //Como têmos de o tamanho total de bytes a receber, adicionamos os valores de cabeçalho e cauda que são hardcoded
          //Serial.println(byte_receber);
          //Serial.println("Tamanho");
          //Serial.print(tamanho_dados);
        }
        if (n_bytes_guardados == tamanho_dados && byte_receber == 0b00000011) { //Chegou ao ultimo byte que é suposto receber e a flag é igual à esperada
          serial_flag_recebido = 0;
          Serial.println("I'm out");
          //tempo_ate_bit_correto = (micros() - tempo_bit_errado) / 1000; //Dividimos por 1000 para ficar com millis caso venhamos a aproveitar este valor se verificarmos que precisamos de definir novos delays
        }
        /*if (tamanho_dados == n_bytes_guardados && byte_receber != 0b00000011 && tamanho_dados != 0) {
          //Serial.println(byte_receber);
          n_bytes_guardados--;
          //Serial.println("I can't get out");
          //tempo_bit_errado = micros();
        }
        n_bytes_guardados++; //
      } else {
        if (byte_receber == 0b00000010 && serial_flag_recebido == 0) {
          Serial.println("I'm in");
          //Serial.println(buffer_max[0], DEC);
          serial_flag_recebido = 1;
          n_bytes_guardados++;
        }
      }*/
    } else {
      //A task de receção não recebeu nada;
    }
    
  }
}

//Tenho de por uma task a tratar do processamento e envio do pacote para a aplicação no PC
//Fazemos isto para evitar possíveis perdas devido aos tempos de processamento já que o tempo
//disponível entre a chegada de cada bit é pequena.

//Sem a aplicação ficamos um pouco limitados na testagem


/*void interruptHandler() {
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  if(posso_alterar == 1) {
    Serial.println("debug");
    //vTaskNotifyGiveFromISR(Task1, &xHigherPriorityTaskWoken);
    detachInterrupt(digitalPinToInterrupt(ReceiverPin));
    xTaskNotifyGive(Task2);
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }*/

void setup() {
  Serial.begin(115200);  //Caso precisemos de usar o manchester o output verdadeiro vai ser 57600 bits por segundo
  pinMode(ReceiverPin, INPUT);
  //attachInterrupt(digitalPinToInterrupt(ReceiverPin), interruptHandler, CHANGE);
  queue = xQueueCreate(1024, sizeof(byte)); //Criamos uma fila com o mesmo espaço que o buffer máximo;
  //xQueueAddToRegistry(queue, "RecebEnvio" );
  if (queue == NULL) {
    Serial.println("Queue não foi criada");
  }
  array_check_flags[9] = '\0';
  xTaskCreatePinnedToCore(
    ProcEnvioF,   /* Task function. */
    "ProcEnvio",     /* nome da task. */
    10000,       /* Tamanho da stack da task */
    NULL,        /* parameteros da task */
    1,           /* prioridade da task */
    &Task1,      /* Handler da Task */
    1);          /* a task vai correr no core 1 */
  delay(200);
  xTaskCreatePinnedToCore(
    ReceberF,   /* Task function. */
    "Receber",     /* nome da task. */
    10000,       /* Tamanho da stack da task */
    NULL,        /* parameteros da task */
    1,           /* prioridade da task */
    &Task2,      /* Handler da Task */
    0);          /* a task vai correr no core 0 */
  delay(200);
}


void loop() {
  //Como fazemos tasks o loop não faz nada
}




//Implementar Task(FreeRTOS) ou multi threading para conseguirmos enviar os pacotes à medida que são recebidos
